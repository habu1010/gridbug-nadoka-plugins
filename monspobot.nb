# -*-ruby; coding: utf-8 -*- vim:set ft=ruby:

require 'fuzzystringmatch'

class MonsterSpoiler
  def initialize(spo_file)
    @table = []
    @SPO_FILE = spo_file
    @jarow = FuzzyStringMatch::JaroWinkler.create(:pure)
    File.open(@SPO_FILE) do |f|
      namepos = nil
      name_lines = []
      f.each_line do |line|
        line = line.toutf8
        if line.strip.empty?
          name_lines.clear
          namepos = f.pos
          next
        end

        if /^===/ =~ line
          recallpos = f.pos
          name_line = name_lines.map {|i| i.strip}.join(" ")
          m = name_line.match(/^(?:\[.\])?\s*(?:(.+)\/)?(.+?)\s*\(.+\)$/)
          @table << {
            :num => @table.size,
            :name => m[1],
            :ename => m[2],
            :namepos => namepos,
            :recallpos => recallpos,
          }
        end
        name_lines << line
      end
    end
  end

  def select_data(search_key)
    [:name, :ename].inject([]) do |sum, symbol|
      sum + @table.select { |i| /#{search_key}/i =~ i[symbol] }. map do |i|
        { :name => i[symbol], :num => i[:num] }
      end
    end
  end

  def get_data(num)
    File.open(@SPO_FILE) {|f|
      mon = @table[num]
      f.pos = mon[:namepos]
      name_length = mon[:recallpos] - mon[:namepos]
      f.read(name_length).toutf8
    }.gsub("\n", ' ')
  end

  def get_recall(num)
    recall_lines = File.open(@SPO_FILE) {|f|
      f.pos = @table[num][:recallpos]
      f.take_while { |line| !line.toutf8.strip.empty? }
    }.map { |i| i.toutf8.chomp }.join("")

    lastpos = 0; pos = 0
    while pos = recall_lines.index(/([。、]|\D[,.])/, pos)
      pos += 1
      if recall_lines[lastpos..pos].tojis.size > 350
        recall_lines.insert(pos, "\n")
        pos += 1
        lastpos = pos
      end
    end

    return recall_lines
  end

  def get_fuzzy_match(search_key)
    search_key_list = [search_key, search_key.tr("ぁ-ん", "ァ-ン"), search_key.tr("ァ-ン", "ぁ-ん")].uniq
    @table.map { |i|
      jp_scores = get_scores(search_key_list, i[:name])

      # ユニークモンスターは名前のみでもスコアを計算する
      match = i[:name].match(/『(.+)』/)
      jp_scores += get_scores(search_key_list, match[0]) if match

      {
        mon: i,
        score_jp: jp_scores.max,
        score_en: @jarow.getDistance(search_key.downcase, i[:ename].downcase),
      }
    }.each { |i|
      i[:score_max] = [i[:score_jp], i[:score_en]].max
    }.sort_by { |i| i[:score_max] }.reverse.take(10).select { |i|
      i[:score_max] >= 0.5
    }.map { |i|
      name = i[:score_jp] >= i[:score_en] ? :name : :ename
      mon = i[:mon]
      { :name => mon[name], :num => mon[:num] }
    }
  end

  private
  def get_scores(search_key_list, target_name)
    search_key_list.map { |i| @jarow.getDistance(i, target_name) }
  end
end

class MonspoBot < Nadoka::NDK_Bot

  def bot_initialize
    @spoiler = {}
    @spoiler["h"] = MonsterSpoiler.new(File.expand_path(File.dirname(__FILE__) + '/band-data/heng-mon-info.spo'))
    @spoiler["x"] = MonsterSpoiler.new(File.expand_path(File.dirname(__FILE__) + '/band-data/xang-mon-info.spo'))
    @spoiler["t"] = MonsterSpoiler.new(File.expand_path(File.dirname(__FILE__) + '/band-data/tang-mon-info.spo'))
    @candidates = []
  end

  def on_privmsg prefix, ch, msg
    if /\Amon([tx]?)(:v)?[>\s]\s*(.+)\s*/i =~ msg.toutf8
      spoiler = $1.empty? ? @spoiler["h"] : @spoiler[$1]
      verbose = $2
      key = $3

      # key が数値の場合候補からの選択を試みる
      if key =~ /^\d+$/
        idx = key.to_i - 1 
        candidates = [@candidates[idx]] if @candidates[idx]
      end

      # 合致するモンスターを検索
      candidates ||= spoiler.select_data(key)

      case
      when candidates.size > 10
        send_notice(ch, "#{key}: 候補の数が多すぎます(#{candidates.size})".tojis)
      when candidates.size > 1
        @candidates = candidates
        send_notice(ch, create_candidates_message.tojis)
      when candidates.empty?
        fuzzy_match_candidates = spoiler.get_fuzzy_match(key)
        if fuzzy_match_candidates.empty?
          send_notice(ch, "#{key}: 見つかりません".tojis)
        else
          @candidates = fuzzy_match_candidates
          send_notice(ch, "#{key}: もしかして: #{create_candidates_message}".tojis)
        end
      else
        # Hit: 情報表示
        mon = candidates.first
        spoiler.get_data(mon[:num]).lines do |i|
          send_notice(ch, i.rstrip.tojis)
        end
        if (verbose)
          spoiler.get_recall(mon[:num]).lines do |i|
            send_notice("#{prefix.nick}", i.rstrip.tojis)
          end
        end
      end
    end
  end

  private
  def create_candidates_message
    @candidates.each_with_index.map { |mon, idx|
      "(#{idx + 1})#{mon[:name]}"
    }.join(" ")
  end
end
